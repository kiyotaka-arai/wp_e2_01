<?php

////////////////////////////////////////////////////////////
// 勉強タスク
////////////////////////////////////////////////////////////
// ・正規表現一旦ちゃんとやんないとやばいな

////////////////////////////////////////////////////////////
// まとめサイト
////////////////////////////////////////////////////////////

// wpまとめ
// https://elearn.jp/wpman/
// wpまとめ
// https://thewppress.com/
// カスタム投稿救世主
// https://www.webdesignleaves.com/pr/wp/wp_custom_post_type.html
// とほほPHP
// https://www.tohoho-web.com/php/index.html

////////////////////////////////////////////////////////////
// フック
////////////////////////////////////////////////////////////

// https://www.webdesignleaves.com/pr/wp/wp_func_hook.html

// フック（Hook）とは？
// 例えば、jQuery ならイベントが発生した場合、登録してあるイベントリスナを使って何らかの処理をするように、WordPress では WordPress がページを表示する処理の特定のタイミングでそのフックに登録した関数を使って何らかの処理をすることができます。
// WordPress では、予め様々な処理のタイミングでフックが用意されています。このフックに独自の関数を登録しておくと、そのフックのタイミングで WordPress がその関数を呼び出すので、処理を追加したり変更したりすることができるようになっています。
// フックには「アクションフック」と「フィルターフック」の2種類があります。
// アクションフック
// WordPress の特定の処理のタイミングで「何らかのアクション（関数）」を実行するためのフックです。アクションフックに関数をフック（登録）するには add_action()  関数を使います。

// 詳細：アクションフック

// フィルターフック
// WordPress がテキスト関連の処理をする際に、そのテキストの内容を変更（フィルター）するためのフックです。言い換えると、WordPress がデフォルトで行うテキスト処理を変更する場合に使用します。フィルターフックに関数をフック（登録）するには add_filter()  関数を使います。

// アクションフック
// アクションフックは、WordPress の特定のタイミングで「独自の関数」を使って何らかの処理を実行するための仕組みです。

// 例えば、記事が保存された時、公開された時、ページが初期化された時、プラグインが読み込まれた時などの様々なタイミングで処理を実行することができます。

// WordPress には特定のタイミングで独自のアクションを追加するための多数のアクションフックが予め設置（用意）されています。

// また、WordPress の関数にはアクションフックを使って特定のタイミングで実行しなければうまく動作しない関数もあります。

// アクションフックに対して関数を登録するには、add_action()  関数を使用します。

// アクションフックは WordPress コアファイル（やテーマ、プラグイン）が do_action()  を呼び出すときにトリガー（実行）されます。

// https://elearn.jp/wpman/function/add_action.html
// add_action
// （1.2以降）
// add_action - アクション関数を追加する

// 説明
// bool add_action( string $tag, mixed $function_to_add [ , int $priority = 10 [ , int $accepted_args = 1 ] ] )
// WordPressシステムの関数にアクション関数を追加する。
// パラメータ
// $tag
// WordPressシステムの関数名。
// $function_to_add
// アクション関数名。メソッドを指定する場合は配列を使用する（注意を参照）。
// $priority
// プライオリティ値（省略時は10）。
// $accepted_args
// アクション関数のパラメータ数（省略時は1）。

////////////////////////////////////////////////////////////
// カスタム投稿
////////////////////////////////////////////////////////////

// object register_post_type( string $post_type [ , mixed $args = array() ] )
// カスタム投稿タイプを登録する。
// パラメータ
// $post_type
// カスタム投稿タイプ名を指定（[4.2.0]タイプ名は1～20文字の範囲）。
// $args
// カスタム投稿タイプの属性を連想配列または文字列で指定（省略時はarray()）。

////////////////////////////////////////////////////////////
// get_postsとWP Query
////////////////////////////////////////////////////////////

// WP Queryは投稿データ以外にもページの情報も取得できる
// ここが一番大きな違いっぽいです。
// WP_Queryは投稿データ以外にも表示されているページそのものの情報も取得できます。
// 表示されているページが投稿ページなのか固定ページなのかや、リクエストされたクエリの情報（パーマリンクや筆者、設定されているカテゴリーなど）も取得できます。

// 説明
// WP_Query は wp-includes/class-wp-query.php に定義されているクラスで、WordPress ブログへの複雑な投稿やページのリクエストを取り扱います。 wp-blog-header.php (バージョン 2.0 では WP クラス) が $wp_query オブジェクトに現在のリクエストを定義する情報を与えることで、$wp_query はどのタイプのクエリを扱っているのか (カテゴリーアーカイブ、年月別アーカイブ、フィード、検索など) を確定し、要求された投稿を取り出します。$wp_query はリクエスト上の情報を多く保持していて、後からでも利用することができます。

// WP_Query を使う場面
// ほとんどの場合、クラスの内部やグローバル変数を使わなくても欲しい情報は手に入れられるでしょう。どこからでも欲しい情報を手に入れるために、とてもたくさんの関数があるのですから。

// WP_Query を使いたくなるかもしれないケースが二つあります。一つは WordPress が今扱っているリクエストがどんなものかを知るためです。$is_* プロパティはこの情報を持つよう設計されています: これを利用するには条件分岐タグを使ってください。これはプラグイン作者によくあるケースです（二番目のケースはテーマ作者に）。

// 二つ目はループの中です。WP_Query はループ内においてよくある要望を実現するための数多くの関数を備えています。手始めに、$wp_query->have_posts() を呼び出す have_posts() は、表示すべき投稿があるかどうかを判断するために使います。while ループの開始時に have_posts() を条件として指定すれば、このループは表示すべき投稿がある限り反復されます。反復処理の中では毎回、$wp_query->the_post() を呼び出す the_post() を使います。これは $wp_query の内部変数とグローバル変数 $post（テンプレートタグはこれに依存します）を設定します。これは上で見た通りです。ループを必要とするテーマファイルを作る時に使うべき関数はたくさんあります。詳しくはループと The Loop in Action をご覧ください。

// 参考: 自分のクエリで the_post() を使うのなら、そのクエリの後に wp_reset_postdata() を実行する必要があります。これはテンプレートタグがメインクエリの現在の投稿を再び使えるようにするためです。

// 参考: Ticket #18408 管理画面内で投稿をクエリする場合、wp_reset_postdata() が期待どおり動かないかもしれないので get_posts() を利用するとよいでしょう。


////////////////////////////////////////////////////////////
// カスタムフィールド
////////////////////////////////////////////////////////////

// https://usagicode.com/wordpress/how-to-use-advanced-custom-fields/

// 新規フィールドグループを追加
// 各フィールドを設定

// フィールドラベル
// これは、編集ページに表示される名前です
// フィールド名
// スペースは不可、アンダースコアとダッシュは使用可能
// フィールドグループを公開しました。

// Location Rules
// 追加したフィールドグループをどの投稿やページに表示させるかを設定します
// 「固定ページ」「会社概要」を選択
// スクショでは「等しい」を選んでいますが、「等しくない」を選ぶと、ホーム以外に表示させる設定に変わります。
// あとはこれで設置してね
// the_field('ceo');

////////////////////////////////////////////////////////////
// url設定
////////////////////////////////////////////////////////////

// サイトアドレス (URL)を
// http://localhost:8888/wp_e2_01
// から
// http://localhost:8888/
// に
// 終わったけど😭

// サブディレクトリにインストールされたWordPressをドメイン直下で展開する場合、WordPressの管理画面だけで修正を行うとインストールディレクトリとの整合性が取れなくなり、エラーになってしまいます。

// 一回、サブディレクトリにインストールしてしまったWordPressを、http://example.com/wp → http://example.com/ のようにURLを修正し、ドメイン直下で展開させたい場合はWordPress公式のマニュアルに記載の方法を取る必要があります。

// これ読んですべて解決
// これ読んですべて解決
// これ読んですべて解決
// https://www.conoha.jp/lets-wp/wp-url-change/

////////////////////////////////////////////////////////////
// テンプレート階層
////////////////////////////////////////////////////////////

// https://retval.jp/blog/wp-front-home-index/#front-pagephp

// 各テンプレートファイルはどんな時に使用するのか
// front-page.php
// WordPress公式サイトにはこのように書かれています。

// front-page.php (classic theme) or front-page.html (block theme)

// The front page template is always used as the site front page if it exists, regardless of what settings on Admin > Settings > Reading.

// WordPress Developer Resources
// この意味は、「front-page.phpが存在する場合は、設定に関係なくサイトのフロントページとして常に使用されますよ」ということです。

// ファイルの名前にもフロントページと入っているように、「front-page.php」を作成すると一番優先されてトップページに表示されるファイルなので、トップページのためのファイルという認識で良いと思います。

// 会社のサイトやブランドサイトなどは「front-page.php」をトップページにします。

// home.php
// WordPress公式サイトにはこのように書かれています。

// home.php (classic theme) or home.html (block theme)

// The home page template is the front page by default. If you do not set WordPress to use a static front page, this template is used to show latest posts.

// WordPress Developer Resources
// 「デフォルトではhome.phpがフロントページに表示されますよ。静的なフロントページを設定していない場合、このファイルは投稿の一覧ページを表示しますよ」という意味です。

// 投稿の一覧ページというのは、WordPressを設置した時に最初からある「投稿」のアーカイブページということです。

// つまり、「home.php」は最初からある「投稿」のアーカイブページで、初めはトップページに設定されてあるということです。

// このhome.phpがトップページに使われているサイトは、主にブログサイトです。

// 会社サイトやブランドサイトと違って、記事の一覧ページがトップにきていますね。

// index.php
// WordPress公式サイトにはこのように書かれています。

// index.php (classic theme) or index.html (block theme)

// The main template file. It is required in all themes.

// WordPress Developer Resources
// この意味は、「メインのテンプレートファイルで、すべてのテーマで必要ですよ」ということです。

// 今まで説明した「front-page.php」や「home.php」のファイルがない場合、フロントページに表示される場合があります。

// その他の場面でも、適切なファイルがない場合に表示される最後の砦のようなファイルです。

// 目的に合わせたファイルではないので、できるだけ必要な箇所には専用のファイルを作成して表示させるようにしたいところですね。


////////////////////////////////////////////////////////////
// セキュリティ
////////////////////////////////////////////////////////////

// PHP入門
// 主にXSS対策
// echoは全てエスケープ
// esc_html
// HTMLタグに使う記号がそのまま表示されないように文字参照(HTMLエンティティ)に変換します｡
// esc_url
// URLを無害化する時に用いる関数
// esc_attr
// HTMLタグの属性のエスケープ
// htmlの属性値は「””」でで囲む（属性値にphp記述含む時の話ね）

// https://www.webdesignleaves.com/pr/wp/wp_func_geninfo.html
// bloginfo() は適切にエスケープ処理されて出力されます。
// bloginfo() は適切にエスケープ処理されて出力されます。
// bloginfo() は適切にエスケープ処理されて出力されます。

// https://www.webdesignleaves.com/pr/wp/wp_escape_functions.html
// the_xxxx と get_xxxx
// テンプレートタグには、the_title() のように値を出力（echo）するものと、get_the_title() のように出力はせず値を返すだけのものがあります。
// the_ を前置するテンプレートタグは、WordPress が echo を行っているテンプレートタグで（適切にエスケープされて出力されるので）安全に使用することができます。そのため、何らかの出力を行う際は（可能であれば） the_xxxx 関数を使用するようにします。
// the_permalink();
// get_ を前置するテンプレートタグは値を返すテンプレートタグなので、出力する場合は適切にエスケープ処理を行う必要があります。
// 例えば、前述のサンプル the_permalink() の定義（ソース）を確認すると以下のようになっています。
// function the_permalink( $post = 0 ) {
//   echo esc_url( apply_filters( 'the_permalink', get_permalink( $post ), $post ) );
// }
// get_permalink() で取得した値に「the_permalink」フィルターフックを適用して、esc_url()  でエスケープ処理後に出力されています。


////////////////////////////////////////////////////////////
// 雑多メモ
////////////////////////////////////////////////////////////

https://thewppress.com/libraries/get-the-permalink/
SEPTEMBER 20, 2017
Post navigation
テンプレートリンク
WordPressループ著者名
記事ページへのリンクを出力するにはthe_permalink()関数を、文字列として取得するにはget_permalink()を使います。

用例
投稿したユーザ名を表示する
同じユーザの投稿一覧へのリンクを表示する
関連
投稿記事・記事一覧を表示する－WordPressループ
Codex
テンプレートタグ/the permalink
テンプレートタグ/get permalink
個別ページへのURLを出力する
WordPressループを用いて記事の一覧を表示したら、今度はそれぞれの記事へのリンクを付けることになると思います。個別記事へのURLを取得するには、the_permalink()を使用します。たいていの場合次のように<a>タグと合わせて使うことになるでしょう。

<a href="<?php the_permalink(); ?>">続きを読む</a>
この関数はWordPressループの中でしか使えません。

一般的なブログでは、記事のタイトルをクリックすると記事一覧に遷移します。これを実現するためにまず思いつくのは、次のような方法でしょう。

<h2><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h2>
これでも特に問題にはなりませんが、the_title()は前後に出力する文字列を第1引数、第2引数に渡すよう設計されています。したがって、以下のように記載するほうがWordPressの思想に合っているといえるかもしれません。

<?php the_title( '<h2><a href="' . esc_url( get_permalink() ) . '">', '</a></h2>' ); ?>
こうしておくと、仮にタイトルが空だった場合、中身のないタグが出力されるのを防ぐことができます。WordPress公式のテーマでもこのように実装されていますね。

なお、get_permalink()については次のセクションを参照してください。
